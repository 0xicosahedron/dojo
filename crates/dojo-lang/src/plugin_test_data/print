//! > Test expansion of the derive(Print).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use serde::Serde;

#[derive(Print)]
struct Position {
    #[key]
    id: felt252,

    x: felt252,
    y: felt252
}

#[derive(Print)]
struct Roles {
    role_ids: Array<u8>
}

use starknet::ContractAddress;

#[derive(Print)]
struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,

    name: felt252, 
}

#[derive(Print)]
enum Enemy {
    Unknown,
    Bot: felt252,
    OtherPlayer: ContractAddress,
}

//! > generated_cairo_code
use serde::Serde;


#[derive(Print)]
struct Position {
    #[key]
    id: felt252,

    x: felt252,
    y: felt252
}

#[cfg(test)]
impl PositionPrintImpl of core::debug::PrintTrait<Position> {
    fn print(self: Position) {
        core::debug::PrintTrait::print('id');
        core::debug::PrintTrait::print(self.id);
        core::debug::PrintTrait::print('x');
        core::debug::PrintTrait::print(self.x);
        core::debug::PrintTrait::print('y');
        core::debug::PrintTrait::print(self.y);
    }
}

#[derive(Print)]
struct Roles {
    role_ids: Array<u8>
}

#[cfg(test)]
impl RolesPrintImpl of core::debug::PrintTrait<Roles> {
    fn print(self: Roles) {
        core::debug::PrintTrait::print('role_ids');
        core::debug::PrintTrait::print(self.role_ids);
    }
}


use starknet::ContractAddress;


#[derive(Print, Copy, Drop, Serde)]
struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,

    name: felt252, 
}

#[cfg(test)]
impl PlayerPrintImpl of core::debug::PrintTrait<Player> {
    fn print(self: Player) {
        core::debug::PrintTrait::print('game');
        core::debug::PrintTrait::print(self.game);
        core::debug::PrintTrait::print('player');
        core::debug::PrintTrait::print(self.player);
        core::debug::PrintTrait::print('name');
        core::debug::PrintTrait::print(self.name);
    }
}

//! > expected_diagnostics

//! > expanded_cairo_code
use serde::Serde;

#[derive(Print)]
struct Position {
    #[key]
    id: felt252,

    x: felt252,
    y: felt252
}

#[derive(Print)]
struct Roles {
    role_ids: Array<u8>
}

use starknet::ContractAddress;

#[derive(Print)]
struct Player {
    #[key]
    game: felt252,
    #[key]
    player: ContractAddress,

    name: felt252, 
}

#[derive(Print)]
enum Enemy {
    Unknown,
    Bot: felt252,
    OtherPlayer: ContractAddress,
}
